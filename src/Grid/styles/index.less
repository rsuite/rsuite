@import '../../styles/common';
@import 'mixin';
@import 'grid-framework';

//
// Grid system
// --------------------------------------------------

// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.rs-grid-container {
  .container-fixed();

  @media (min-width: @screen-phone) {
    width: @container-sm;
  }

  @media (min-width: @screen-desktop) {
    width: @container-md;
  }

  @media (min-width: @screen-lg-desktop) {
    width: @container-lg;
  }
}

// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.rs-grid-container-fluid {
  .container-fixed();
}

// Columns
//
// Common styles for small and large grid columns
// fixme should be .rs-col
.col {
  float: left;
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left: ceil((@grid-gutter-width / 2));
  padding-right: floor((@grid-gutter-width / 2));
}

// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

.make-grid(xs);

// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets / phones.

@media (min-width: @screen-phone) {
  .make-grid(sm);
}

// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: @screen-desktop) {
  .make-grid(md);
}

// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: @screen-lg-desktop) {
  .make-grid(lg);
}

// Hiddens
//
// All hidden styles.

@media (max-width: (@screen-phone - 1)) {
  .hidden(xs);
}

@media (min-width: @screen-phone) and (max-width: (@screen-desktop - 1)) {
  .hidden(sm);
}

@media (min-width: @screen-desktop) and (max-width: (@screen-lg-desktop - 1)) {
  .hidden(md);
}

@media (min-width: @screen-lg-desktop) {
  .hidden(lg);
}
